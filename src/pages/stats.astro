---
import NavBar from "../components/NavBar.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Stats | IS Manager">
    <main class="col">
        <NavBar title="Stats" origin="home"/>
        <div class="row justify-center">
          <div class="radio-inputs bg-slate-100 dark:bg-slate-800 text-slate-400 dark:text-slate-500 my-4">
              <label class="radio">
                <input type="radio" name="radio" checked="" data-option="1" data-button>
                <span class="name">Progress</span>
              </label>
              <label class="radio">
                <input type="radio" name="radio" data-option="2" data-button>
                <span class="name">Global</span>
              </label>
              <label class="radio">
                <input type="radio" name="radio" data-option="3" data-button>
                <span class="name">Annual</span>
              </label>
              <label class="radio">
                <input type="radio" name="radio" data-option="4" data-button>
                <span class="name">Periods</span>
              </label>
              <label class="radio">
                <input type="radio" name="radio" data-option="5" data-button>
                <span class="name">Classes</span>
              </label>
            </div>
      </div>
        <div class="grid grid-cols-1 lg:max-h-[90%] px-[1rem] overflow-hidden" id="chartContainer">
            
        </div>
    </main>
</Layout>
<style>
  .radio-inputs {
        position: relative;
        display: flex;
        flex-wrap: wrap;
        border-radius: 0.5rem;
        box-sizing: border-box;
        box-shadow: 0 0 0px 1px rgba(0, 0, 0, 0.06);
        padding: 0.25rem;
        width: 300px;
        font-size: 14px;
    }

.radio-inputs .radio {
  flex: 1 1 auto;
  text-align: center;
}

.radio-inputs .radio input {
  display: none;
}

.radio-inputs .radio .name {
  display: flex;
  cursor: pointer;
  align-items: center;
  justify-content: center;
  border-radius: 0.5rem;
  border: none;
  padding: .5rem 0;
  transition: all .15s ease-in-out;
}

.radio-inputs .radio input:checked + .name {
  background-color: #fff;
  font-weight: 600;
  color: rgb(15 23 42 / 1) !important;
}
@media (prefers-color-scheme: dark) {
    .radio-inputs .radio input:checked + .name {
        background-color: rgb(15 23 42 / 1);
        color: #fff !important;
    }
}
</style>
<script is:inline type="module">
  const rem = remaining.length;
  const total = career.classes.length;
  const passed = past.length;
  const buttons = document.querySelectorAll('[data-button]');
  const chart = document.getElementById('chart');
  const chartContainer = document.getElementById('chartContainer');
  
  let anios = {};
  let aniosbar = [];
  let dataCTX = [{
  label: 'Average',
  data: [],
  tension: 0.1,
  pointRadius: 5,
  pointHoverRadius: 15
}];
  let dataBar = [
    {
      label: 'I PAC',
      data: []
    },
    {
      label: 'II PAC',
      data: []
    },
    {
      label: 'III PAC',
      data: []
    }
  ];
  let CLG = {"labels":[],"data":[{
  label: "CLASSES",
  data: [],
  tension: 0.1,
  pointStyle: 'circle',
  pointRadius: 8,
  pointHoverRadius: 15
}]};
  let global = {"labels":[],"data":[{
  label: "GLOBAL",
  data: [],
  tension: 0.1,
  pointRadius: 8,
  pointHoverRadius: 15
}]};
let Classes = [{
  label: 'Score',
  data: [],
  tension: 0.1,
  pointRadius: 5,
  pointHoverRadius: 15
}];
let classesName = [];
data.classes.forEach(element => {
  
  if (element.CALIFICACION < 65) {
    return
  }
  Classes[0].data.push(element.CALIFICACION)
  classesName.push(element.ASIGNATURA)
  CLG.labels.push(element.ASIGNATURA);
  CLG.data[0].data.push(element.CALIFICACION);
  if (!(element.ANIO.trim() in anios)) {
      anios[element.ANIO.trim()] = {
        1: {
          "uv": 0,
          "notas": 0,
          "snota": 0,
        },
        2: {
          "uv": 0,
          "notas": 0,
          "snota": 0,
        },
        3: {
          "uv": 0,
          "notas": 0,
          "snota": 0,
        }
      }
    }
    anios[element.ANIO.trim()][element.PERIODO.trim()].uv += element.UV*1;
    anios[element.ANIO.trim()][element.PERIODO.trim()].notas += element.CALIFICACION*1;
    anios[element.ANIO.trim()][element.PERIODO.trim()].snota += element.UV*element.CALIFICACION;

    if (!(global.labels.includes(element.PERIODO.trim() + ' PAC ' + element.ANIO.trim()))){
      global.labels.push((element.PERIODO.trim() + ' PAC ' + element.ANIO.trim()))
    }
});

let GL1=[0,0];
for (const anio in anios) {
  aniosbar.push(anio)
  dataBar[0].data.push((anios[anio][1].snota/anios[anio][1].uv).toFixed(2))
  dataBar[1].data.push((anios[anio][2].snota/anios[anio][2].uv).toFixed(2))
  dataBar[2].data.push((anios[anio][3].snota/anios[anio][3].uv).toFixed(2))
  let anual = [0,0]
  anual[0] += anios[anio][1].snota;
  anual[1] += anios[anio][1].uv;
  anual[0] += anios[anio][2].snota;
  anual[1] += anios[anio][2].uv;
  anual[0] += anios[anio][3].snota;
  anual[1] += anios[anio][3].uv;
  dataCTX[0].data.push((anual[0]/anual[1]).toFixed(2));

  GL1[0] += anios[anio][1].snota;
  GL1[1] += anios[anio][1].uv;
  global.data[0].data.push((GL1[0]/GL1[1]).toFixed(2))
  GL1[0] += anios[anio][2].snota;
  GL1[1] += anios[anio][2].uv;
  global.data[0].data.push((GL1[0]/GL1[1]).toFixed(2))
  GL1[0] += anios[anio][3].snota;
  GL1[1] += anios[anio][3].uv;
  global.data[0].data.push((GL1[0]/GL1[1]).toFixed(2))
}

global.labels.reverse();
classesName.reverse();
Classes[0].data.reverse();
  function CreateChart(ChartType) {
    chartContainer.innerHTML = '<div id="chart"></div>'
    const options = {
      "progress": {
      series: [passed/total*100, rem/total*100],
      labels: ['Passed', 'Remaining'],
      chart: {
          type: 'donut',
          height: 700,
      },
      plotOptions: {
          pie: {
              donut: {
                  labels: {
                      show: true,
                      name: {
                          show: true,
                          offsetY: -20,
                          formatter: function (val) {
                              return val;
                          }
                      },
                      value: {
                          show: true,
                          offsetY: 10,
                          formatter: function (val) {
                              return parseInt((val/100)*total) + " Classes";
                          }
                      },
                      total: {
                          show: true,
                          label: 'Progress',
                          formatter: function (w) {
                              return `${passed+'/'+total} Classes`
                          }
                      }
                  }
              }
          }
      },
      colors: ['#FF4500', '#FFA500'],
      stroke: {
          width: 0, // Elimina el borde blanco
      },
      legend: {
          position: 'bottom',
          horizontalAlign: 'center',
          offsetY: 10
      },
      tooltip: {
          y: {
            formatter: function (val) {
              return val + "%"
            }
          }
        }
      },
      "global": {
        series: [{
        name: 'Global',
        data: global.data[0].data
      }],
        chart: {
        height: 350,
        type: 'area'
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        curve: 'smooth'
      },
      xaxis: {
        categories: global.labels
      },
      tooltip: {
          y: {
            formatter: function (val) {
              return val + "%"
            }
          }
        }
      },
      "annual": {
        series: [
        {
          name: "Year",
          data: dataCTX[0].data
        }
      ],
        chart: {
        height: 350,
        type: 'line',
        dropShadow: {
          enabled: true,
          color: '#000',
          top: 18,
          left: 7,
          blur: 10,
          opacity: 0.2
        },
        zoom: {
          enabled: false
        },
        toolbar: {
          show: false
        }
      },
      colors: ['#77B6EA'],
      dataLabels: {
        enabled: true,
      },
      stroke: {
        curve: 'smooth'
      },
      title: {
        text: 'Average Annual',
        align: 'left'
      },
      grid: {
        borderColor: '#e7e7e7',
        row: {
          colors: ['transparent', 'transparent'],
          opacity: 0.5
        },
      },
      markers: {
        size: 1
      },
      xaxis: {
        categories: aniosbar,
        title: {
          text: 'Year'
        }
      },
      legend: {
        position: 'top',
        horizontalAlign: 'right',
        floating: true,
        offsetY: -25,
        offsetX: -5
      },
      tooltip: {
          y: {
            formatter: function (val) {
              return val + "%"
            }
          }
        }
      },
      "periods": {
          series: [{
          name: dataBar[0].label,
          data: dataBar[0].data
        }, {
          name: dataBar[1].label,
          data: dataBar[1].data
        }, {
          name: dataBar[2].label,
          data: dataBar[2].data
        }],
          chart: {
          type: 'bar',
          height: 350
        },
        plotOptions: {
          bar: {
            horizontal: false,
            columnWidth: '55%',
            endingShape: 'rounded'
          },
        },
        dataLabels: {
          enabled: false
        },
        stroke: {
          show: true,
          width: 2,
          colors: ['transparent']
        },
        xaxis: {
          categories: aniosbar,
        },
        fill: {
          opacity: 1
        },
        tooltip: {
          y: {
            formatter: function (val) {
              return val + "%"
            }
          }
        }
      },
      "classes": {
        series: [
        {
          name: "Class",
          data: Classes[0].data
        }
      ],
        chart: {
        height: 350,
        type: 'line',
        dropShadow: {
          enabled: true,
          color: '#000',
          top: 18,
          left: 7,
          blur: 10,
          opacity: 0.2
        },
        zoom: {
          enabled: false
        },
        toolbar: {
          show: false
        }
      },
      colors: ['#77B6EA'],
      dataLabels: {
        enabled: true,
      },
      stroke: {
        curve: 'smooth'
      },
      title: {
        text: '',
        align: 'left'
      },
      grid: {
        borderColor: '#e7e7e7',
        row: {
          colors: ['transparent', 'transparent'],
          opacity: 0.5
        },
      },
      markers: {
        size: 1
      },
      xaxis: {
        categories: classesName,
        title: {
          text: 'Class'
        }
      },
      legend: {
        position: 'top',
        horizontalAlign: 'right',
        floating: true,
        offsetY: -25,
        offsetX: -5
      },
      tooltip: {
          y: {
            formatter: function (val) {
              return val + "%"
            }
          }
        }
      },
    }
    var apexchart = new ApexCharts(document.querySelector("#chart"), options[ChartType]);
    apexchart.render();
  }

  CreateChart('progress')

  buttons.forEach((button) => {
    button.addEventListener('click', (e) => tabOption(e.target));
  });
  function tabOption(object) {
    const value = parseInt(object.getAttribute('data-option'));
    switch (value) {
      case 1:
          CreateChart('progress');
          break;
        case 2:
          CreateChart('global');
          break;
        case 3:
          CreateChart('annual');
          break;
        case 4:
          CreateChart('periods');
        break;
        case 5:
          CreateChart('classes');
        break;
      default:
        break;
    }
  }
</script>